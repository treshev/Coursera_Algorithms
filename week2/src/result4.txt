See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (3 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 6 warnings)

Correctness:  37/41 tests passed
Memory:       1/1 tests passed
Timing:       25/41 tests passed

Aggregate score: 86.34%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.9K Aug 21 18:15 BruteCollinearPoints.java
4.2K Aug 21 18:15 FastCollinearPoints.java
3.8K Aug 21 18:15 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B HE_EQUALS_USE_HASHCODE HE: The class overrides 'equals()' but not 'hashCode()'. As a result, 'FastCollinearPoints$PointMap' will not work with 'java.util.HashMap' or 'java.util.HashSet'.  At FastCollinearPoints.java:[lines 25-28]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At Point.java:[line 20]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 40]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:23:38: Do not use the letter 'o' as a parameter variable name. It is hard to distinguish from the number '0'. [ParameterName]
[WARN] FastCollinearPoints.java:90:24: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:90:26: '!=' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:107:19: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:107:21: '!=' is not followed by whitespace. [WhitespaceAround]
Checkstyle ends with 0 errors and 5 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:4:1: Defining a nested class in this program suggests poor design. [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 16/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt
  * filename = inarow.txt
==> passed

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
  * 90 random points in a 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 90

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:74)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:448)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 50

  * 200 random points in a 50-by-50 grid
    java.lang.ArrayIndexOutOfBoundsException: 200

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:74)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.randomPointsInRange(TestFastCollinearPoints.java:427)
    TestFastCollinearPoints.test11(TestFastCollinearPoints.java:449)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:820)

    - failed on trial 1 of 10

==> FAILED

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:74)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:464)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 20-by-20 grid
    java.lang.ArrayIndexOutOfBoundsException: 400

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:74)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:465)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid
  * 15-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 60

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:84)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:469)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

  * 25-by-4 grid
    java.lang.ArrayIndexOutOfBoundsException: 100

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:84)
    TestFastCollinearPoints.testSegments(TestFastCollinearPoints.java:107)
    TestFastCollinearPoints.grid(TestFastCollinearPoints.java:456)
    TestFastCollinearPoints.test12(TestFastCollinearPoints.java:470)
    TestFastCollinearPoints.main(TestFastCollinearPoints.java:823)

==> FAILED

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

  * equidistant.txt
    - data type mutated the points[] array
    - data type should have no side effects unless documented in API

==> FAILED

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 18/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3640           0           3640                   61
=> passed    32   0.00       71920           0          71920                  154
=> passed    64   0.02     1270752           0        1270752                  367
=> passed   128   0.03    21336000           0       21336000                  870
=> passed   256   0.53   349585280           0      349585280                 1989
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3808           0           3808                   61
=> passed    32   0.00       72742           0          72742                  155
=> passed    64   0.01     1273906           0        1273906                  368
=> passed   128   0.14    21348992           0       21348992                  861
=> passed   256   2.16   349635966           0      349635966                 1985
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.01        3904        8064          20032                  375
=> passed   128   0.01       16000       39430          94860                  868
=> passed   256   0.02       64768      186803         438374                 1989
=> passed   512   0.08      260608      868051        1996710                 4477
=> passed  1024   0.20     1045504     3967168        8979840                 9975
=> passed  2048   0.57     4188160    17818352       39824864                22017
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (39824864 / 8979840) = 2.15
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        3965        1952           7869                  368
=> passed   128   0.00       16125        8000          32125                  864
=> passed   256   0.00       65021       32384         129789                 1974
=> passed   512   0.01      261117      130304         521725                 4477
=> passed  1024   0.03     1046525      522752        2092029                 9967
=> passed  2048   0.08     4190205     2094080        8378365                21997
=> passed  4096   0.26    16769021     8382464       33533949                48157
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (33533949 / 8378365) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:84)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid4(TimeFastCollinearPoints.java:178)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:279)

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
    java.lang.ArrayIndexOutOfBoundsException: 64

    FastCollinearPoints.addSegment(FastCollinearPoints.java:109)
    FastCollinearPoints.<init>(FastCollinearPoints.java:74)
    TimeFastCollinearPoints.timingTest(TimeFastCollinearPoints.java:92)
    TimeFastCollinearPoints.time(TimeFastCollinearPoints.java:221)
    TimeFastCollinearPoints.timeGrid8(TimeFastCollinearPoints.java:203)
    TimeFastCollinearPoints.main(TimeFastCollinearPoints.java:283)

Total: 15/31 tests passed!


================================================================