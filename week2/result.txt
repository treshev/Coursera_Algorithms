java -cp algs4.jar; Permutation 8 < duplicates.txt


See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     FAILED (2 warnings)
PMD:          FAILED (6 warnings)
Checkstyle:   FAILED (0 errors, 10 warnings)

Correctness:  20/43 tests passed
Memory:       103/105 tests passed
Timing:       181/193 tests passed

Aggregate score: 66.47%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.0K Aug 15 14:06 Deque.java
 627 Aug 15 14:06 Permutation.java
3.0K Aug 15 14:06 RandomizedQueue.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Deque.java
*-----------------------------------------------------------

% javac RandomizedQueue.java
*-----------------------------------------------------------
RandomizedQueue.java:26: warning: [unchecked] unchecked cast
    private Item[] dataSet = (Item[]) new Object[1];
                                      ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
RandomizedQueue.java:40: warning: [unchecked] unchecked cast
        Item[] newDataSet = (Item[]) new Object[newSize];
                                     ^
  required: Item[]
  found:    Object[]
  where Item is a type-variable:
    Item extends Object declared in class RandomizedQueue
2 warnings

% javac Permutation.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Permutation:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M B IT_NO_SUCH_ELEMENT It: The 'next()' method must throw a 'java.util.NoSuchElementException' if it is called when there are no more elements to return.  At RandomizedQueue.java:[line 17]
M C UWF_NULL_FIELD UwF: The instance (or static) variable 'previous' is never assigned a non-null value.  In Deque.java
Warnings generated: 2


================================================================


% pmd .
*-----------------------------------------------------------
Deque.java:12: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Deque.java:13: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
Deque.java:14: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
RandomizedQueue.java:21: The method body is empty. If this is your intent, document it with a comment. [UncommentedEmptyMethodBody]
RandomizedQueue.java:26: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
RandomizedQueue.java:27: Instance (and static) variables should be declared at the top of the class, before any method declarations, constructors, or nested classes. [FieldDeclarationsShouldBeAtStartOfClass]
PMD ends with 6 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Deque.java:60:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:106:26: Inner assignments should be avoided. [InnerAssignment]
[WARN] Deque.java:117:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:128:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] Deque.java:140:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] RandomizedQueue.java:90:3: The comment is empty. [EmptyComment]
[WARN] RandomizedQueue.java:94:3: The comment is empty. [EmptyComment]
[WARN] RandomizedQueue.java:98:3: The comment is empty. [EmptyComment]
[WARN] RandomizedQueue.java:104:3: The comment is empty. [EmptyComment]
[WARN] RandomizedQueue.java:110:3: The comment is empty. [EmptyComment]
Checkstyle ends with 0 errors and 10 warnings.

% custom checkstyle checks for Deque.java
*-----------------------------------------------------------

% custom checkstyle checks for RandomizedQueue.java
*-----------------------------------------------------------

% custom checkstyle checks for Permutation.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Deque
*-----------------------------------------------------------
Running 16 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(),
removeLast(), isEmpty(), and size(). The probabilities of each
operation are (p1, p2, p3, p4, p5, p6), respectively.

Test 1: check random calls to addFirst(), addLast(), and size()
  *    5 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.4, 0.4, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to addFirst(), removeFirst(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 3: check random calls to addFirst(), removeLast(), and isEmpty()
  *    5 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 19 of 50
    - student   removeLast() returned 1
    - reference removeLast() returned 2

  *  500 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 21 of 500
    - student   removeLast() returned 0
    - reference removeLast() returned 1

  * 1000 random calls (0.8, 0.0, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 25 of 1000
    - student   removeLast() returned 0
    - reference removeLast() returned 1

  *    5 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 15 of 50
    - student   removeLast() returned 12
    - reference removeLast() returned 13

  *  500 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 45 of 500
    - student   removeLast() returned 42
    - reference removeLast() returned 43

  * 1000 random calls (0.1, 0.0, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 42 of 1000
    - student   removeLast() returned 39
    - reference removeLast() returned 40

==> FAILED

Test 4: check random calls to addLast(), removeLast(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 57 of 500
    - student   removeLast() returned 55
    - reference removeLast() returned 50

  * 1000 random calls (0.0, 0.8, 0.0, 0.1, 0.1, 0.0)
    - failed on operation 17 of 1000
    - student   removeLast() returned 14
    - reference removeLast() returned 13

  *    5 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 3 of 500
    - student   removeLast() returned 1
    - reference removeLast() returned 0
    - sequence of operations was:
         Deque<Integer> deque = new Deque<Integer>()
         deque.addLast(0)
         deque.addLast(1)
         deque.removeLast()      ==> 1
         deque.removeLast()      ==> 1

  * 1000 random calls (0.0, 0.1, 0.0, 0.8, 0.1, 0.0)
    - failed on operation 26 of 1000
    - student   removeLast() returned 23
    - reference removeLast() returned 22

==> FAILED

Test 5: check random calls to addLast(), removeFirst(), and isEmpty()
  *    5 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.8, 0.1, 0.0, 0.1, 0.0)
  *    5 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *   50 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  *  500 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
  * 1000 random calls (0.0, 0.1, 0.8, 0.0, 0.1, 0.0)
==> passed

Test 6: check random calls to addFirst(), addLast(), removeFirst(),
        removeLast(), isEmpty(), and size()
  *    5 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 38 of 50
    - student   removeLast() returned 32
    - reference removeLast() returned 29

  *  500 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 14 of 500
    - student   removeLast() returned 8
    - reference removeLast() returned 7

  * 1000 random calls (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)
    - failed on operation 58 of 1000
    - student   removeLast() returned 55
    - reference removeLast() returned 53

  *    5 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
  *   50 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 46 of 50
    - student   removeLast() returned 27
    - reference removeLast() returned 24

  *  500 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 22 of 500
    - student   removeLast() returned 20
    - reference removeLast() returned 18

  * 1000 random calls (0.1, 0.1, 0.3, 0.3, 0.1, 0.1)
    - failed on operation 23 of 1000
    - student   removeLast() returned 19
    - reference removeLast() returned 21

==> FAILED

Test 7: check removeFirst() and removeLast() from an empty deque
  * removeFirst()
  * removeLast()
==> passed

Test 8: check whether two Deque objects can be created at the same time
==> passed

Test 9: check iterator() after n calls to addFirst()
  * n = 10
  * n = 50
==> passed

Test 10: check iterator() after each of m intermixed calls to
         addFirst(), addLast(), removeFirst(), and removeLast()
  * m = 20
    - number of student   entries = 5
    - number of reference entries = 4
    - iterator failed after applying operation 20

  * m = 50
    - number of student   entries = 2
    - number of reference entries = 1
    - iterator failed after applying operation 5
    - sequence of operations was:
         Deque deque<Integer> = new Deque<Integer>()
         deque.addLast(1)
         deque.addFirst(2)
         deque.removeFirst()   ==> 2
         deque.addLast(4)
         deque.removeLast()    ==> 4

  * m = 100
    - number of student   entries = 15
    - number of reference entries = 14
    - iterator failed after applying operation 26

  * m = 1000
    - number of student   entries = 8
    - number of reference entries = 7
    - iterator failed after applying operation 19

==> FAILED

Test 11: create two nested iterators to same deque
  * n = 10
  * n = 50
==> passed

Test 12: create two parallel iterators to same deque
==> passed

Test 13: create Deque objects of different parameterized types
==> passed

Test 14: call addFirst() and addLast() with null argument
==> passed

Test 15: check that remove() and next() throw the specified exceptions in iterator()
==> passed

Test 16: call iterator() when the deque is empty
==> passed


Total: 12/16 tests passed!


================================================================
Testing correctness of RandomizedQueue
*-----------------------------------------------------------
Running 18 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), sample(),
isEmpty(), and size(). The probabilities of each operation are
(p1, p2, p3, p4, p5), respectively.

Test 1: check random calls to enqueue() and size()
  *    5 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *   50 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  *  500 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
  * 1000 random calls (0.8, 0.0, 0.0, 0.0, 0.2)
==> passed

Test 2: check random calls to enqueue() and dequeue()
  *    5 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *   50 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *  500 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  * 1000 random calls (0.7, 0.1, 0.0, 0.1, 0.1)
  *    5 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.isEmpty()     ==> false
  *   50 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(34)
         rq.isEmpty()     ==> false
         rq.isEmpty()     ==> false
         rq.dequeue()     ==> 34
         rq.isEmpty()     ==> false
  *  500 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.enqueue(445)
         rq.dequeue()     ==> 445
         rq.enqueue(262)
         rq.dequeue()     ==> 262
         rq.enqueue(461)
         rq.dequeue()     ==> 461
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.size()        ==> 0
         rq.isEmpty()     ==> false
  * 1000 random calls (0.1, 0.7, 0.0, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.isEmpty()     ==> false
==> FAILED

Test 3: check random calls to enqueue(), sample(), and size()
  *    5 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *   50 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *  500 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  * 1000 random calls (0.8, 0.0, 0.1, 0.0, 0.1)
  *    5 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *   50 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  *  500 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
  * 1000 random calls (0.1, 0.0, 0.8, 0.0, 0.1)
==> passed

Test 4: check random calls to enqueue(), dequeue(), sample(), isEmpty(), and size()
  *    5 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *   50 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *  500 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  * 1000 random calls (0.6, 0.1, 0.1, 0.1, 0.1)
  *    5 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.size()        ==> 0
         rq.isEmpty()     ==> false
  *   50 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.isEmpty()     ==> false
  *  500 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

  * 1000 random calls (0.1, 0.6, 0.1, 0.1, 0.1)
    - student   isEmpty() returned false
    - reference isEmpty() returned true

    - sequence of randomized queue operations was:
         RandomizedQueue<Integer> rq = new RandomizedQueue<Integer>()
         rq.isEmpty()     ==> false
==> FAILED

Test 5: call dequeue() and sample() from an empty randomized queue
  * dequeue()
     java.util.NoSuchElementException not thrown
  * sample()
     java.util.NoSuchElementException not thrown
==> FAILED

Test 6: create multiple randomized queue objects at the same time
  * n = 10
    - isEmpty() returns wrong value
    - student   isEmpty() = false
    - reference isEmpty() = true

    - failed on dequeue() operation 9 of 10 in randomized queue 1

  * n = 100
    - isEmpty() returns wrong value
    - student   isEmpty() = false
    - reference isEmpty() = true

    - failed on dequeue() operation 99 of 100 in randomized queue 1

==> FAILED

Test 7: check that iterator() returns correct items after a sequence
        of n enqueue() operations
  * n = 10
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    UtilCOS.compareAsMultisets(UtilCOS.java:505)
    UtilCOS.compareAsMultisets(UtilCOS.java:497)
    TestRandomizedQueue.checkIteratorAfterEnqueue(TestRandomizedQueue.java:836)
    TestRandomizedQueue.test7(TestRandomizedQueue.java:850)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1185)

  * n = 50
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    UtilCOS.compareAsMultisets(UtilCOS.java:505)
    UtilCOS.compareAsMultisets(UtilCOS.java:497)
    TestRandomizedQueue.checkIteratorAfterEnqueue(TestRandomizedQueue.java:836)
    TestRandomizedQueue.test7(TestRandomizedQueue.java:851)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1185)

==> FAILED

Test 8: check that iterator() returns correct items after sequence
        of m enqueue() and dequeue() operations
  * m = 10
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:884)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:902)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1188)

  * m = 1000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TestRandomizedQueue.checkIteratorAfterEnqueueDequeue(TestRandomizedQueue.java:884)
    TestRandomizedQueue.test8(TestRandomizedQueue.java:903)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1188)

==> FAILED

Test 9: create two nested iterators over the same randomized queue
  * n = 10
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    TestRandomizedQueue.checkTwoNestedIterators(TestRandomizedQueue.java:325)
    TestRandomizedQueue.test9(TestRandomizedQueue.java:910)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1191)

  * n = 50
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    TestRandomizedQueue.checkTwoNestedIterators(TestRandomizedQueue.java:325)
    TestRandomizedQueue.test9(TestRandomizedQueue.java:911)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1191)

==> FAILED

Test 10: create two parallel iterators over the same randomized queue
  * n = 10
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false

  * n = 50
    - student   iterator 1 hasNext() = true
    - student   iterator 2 hasNext() = true
    - reference iterator   hasNext() = false

==> FAILED

Test 11: create two iterators over different randomized queues
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    UtilCOS.compareAsMultisets(UtilCOS.java:505)
    UtilCOS.compareAsMultisets(UtilCOS.java:497)
    TestRandomizedQueue.test11(TestRandomizedQueue.java:939)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1197)

==> FAILED

Test 12: create RandomizedQueue objects of different parameterized types
==> passed

Test 13: check randomness of sample() by enqueueing n items, repeatedly calling
         sample(), and counting the frequency of each item
  * n = 3, trials = 12000
  * n = 5, trials = 12000
  * n = 8, trials = 12000
  * n = 10, trials = 12000
==> passed

Test 14: check randomness of dequeue() by enqueueing n items, dequeueing n items,
         and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
  * n = 3, trials = 12000
  * n = 4, trials = 12000
  * n = 5, trials = 12000
==> passed

Test 15: check randomness of iterator() by enqueueing n items, iterating over those
         n items, and seeing whether each of the n! permutations is equally likely
  * n = 2, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:654)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:1004)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1209)

  * n = 3, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:654)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:1005)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1209)

  * n = 4, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:654)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:1006)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1209)

  * n = 5, trials = 12000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TestRandomizedQueue.checkRandomnessOfIterator(TestRandomizedQueue.java:654)
    TestRandomizedQueue.test15(TestRandomizedQueue.java:1007)
    TestRandomizedQueue.main(TestRandomizedQueue.java:1209)

==> FAILED

Test 16: call enqueue() with a null argument
==> passed

Test 17: check that remove() and next() throw the specified exceptions in iterator()
    - fails to throw an exception when calling remove()

    - throws wrong exception when calling next() when iterator is exhausted
    - throws a java.lang.ArrayIndexOutOfBoundsException
    - should throw a java.util.NoSuchElementException

==> FAILED

Test 18: call iterator() when randomized queue is empty
==> passed


Total: 7/18 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference RandomizedQueue and Deque)
********************************************************************************

Testing correctness of Permutation
*-----------------------------------------------------------
Tests 1-5 call the main() function directly, resetting standard input
before each call.

Running 9 total tests.

Test 1a: check formatting for sample inputs from assignment specification
  % java Permutation 3 < distinct.txt
  3
  B
  I
  E

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 4
  - lines of output in reference solution = 3

  % java Permutation 3 < distinct.txt
  3
  E
  H
  A

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 4
  - lines of output in reference solution = 3

  % java Permutation 8 < duplicates.txt
  8
  BB
  BB
  BB
  AA
  BB
  CC
  BB
  CC

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 9
  - lines of output in reference solution = 8

==> FAILED

Test 1b: check formatting for other inputs
  % java Permutation 8 < mediumTale.txt
  8
  was
  the
  of
  it
  foolishness
  worst
  was
  it

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 9
  - lines of output in reference solution = 8

  % java Permutation 0 < distinct.txt
  0

  - wrong number of lines of output in student solution
  - lines of output in student   solution = 1
  - lines of output in reference solution = 0

==> FAILED

Test 2: check that main() reads all data from standard input
  * filename = distinct.txt, k = 3
  * filename = distinct.txt, k = 3
  * filename = duplicates.txt, k = 8
  * filename = mediumTale.txt, k = 8
==> passed

Test 3a: check that main() prints each item from the sequence at most once
         (for inputs with no duplicate strings)
  * filename = distinct.txt, k = 3
    - student solutions prints string "3"
    - but "3" does not appear in input
    - failed on trial 1 of 1000

  * filename = distinct.txt, k = 1
    - student solutions prints string "1"
    - but "1" does not appear in input
    - failed on trial 1 of 1000

  * filename = distinct.txt, k = 9
    - student solutions prints string "9"
    - but "9" does not appear in input
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 6
    - student solutions prints string "6"
    - but "6" does not appear in input
    - failed on trial 1 of 1000

  * filename = permutation10.txt, k = 10
    - student solutions prints string "10"
    - but "10" does not appear in input
    - failed on trial 1 of 1000

==> FAILED

Test 3b: check that main() prints each item from the sequence at most once
         (for inputs with duplicate strings)
  * filename = duplicates.txt, k = 8
    - student solutions prints string "8"
    - but "8" does not appear in input
    - failed on trial 1 of 1000

  * filename = duplicates.txt, k = 3
    - student solutions prints string "3"
    - but "3" does not appear in input
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 6
    - student solutions prints string "6"
    - but "6" does not appear in input
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 2
    - student solutions prints string "2"
    - but "2" does not appear in input
    - failed on trial 1 of 1000

  * filename = tinyTale.txt, k = 10
    - student solutions prints string "10"
    - but "10" does not appear in input
    - failed on trial 1 of 1000

==> FAILED

Test 3c: check that main() prints each item from the sequence at most once
         (for inputs with newlines)
  * filename = mediumTale.txt, k = 10
    - student solutions prints string "10"
    - but "10" does not appear in input
    - failed on trial 1 of 1000

  * filename = mediumTale.txt, k = 20
    - student solutions prints string "20"
    - but "20" does not appear in input
    - failed on trial 1 of 1000

  * filename = tale.txt, k = 10
    - student solutions prints string "10"
    - but "10" does not appear in input
    - failed on trial 1 of 5

  * filename = tale.txt, k = 50
==> FAILED

Test 4: check main() when k = 0
  * filename = distinct.txt, k = 0
    - student solutions prints string "0"
    - but "0" does not appear in input
    - failed on trial 1 of 10

  * filename = distinct.txt, k = 0
    - student solutions prints string "0"
    - but "0" does not appear in input
    - failed on trial 1 of 10

==> FAILED

Test 5a: check that permutations are uniformly random
         (for inputs with no duplicate strings)
  * filename = permutation4.txt, k = 1
    - student prints an invalid permutation:
      1 D
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 2
    - student prints an invalid permutation:
      2 D C
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 3
    - student prints an invalid permutation:
      3 C A B
    - failed on trial 1 of 1000

  * filename = permutation4.txt, k = 4
    - student prints an invalid permutation:
      4 D C B A
    - failed on trial 1 of 1000

  * filename = permutation6.txt, k = 2
    - student prints an invalid permutation:
      2 D A
    - failed on trial 1 of 1000

==> FAILED

Test 5b: check that permutations are uniformly random
         (for inputs with duplicate strings)
  * filename = permutation5.txt, k = 1
    - student prints an invalid permutation:
      1 A
    - failed on trial 1 of 1000

  * filename = permutation5.txt, k = 2
    - student prints an invalid permutation:
      2 A A
    - failed on trial 1 of 1000

  * filename = permutation5.txt, k = 3
    - student prints an invalid permutation:
      3 A B A
    - failed on trial 1 of 1000

  * filename = duplicates.txt, k = 3
    - student prints an invalid permutation:
      3 BB BB BB
    - failed on trial 1 of 1000

  * filename = permutation8.txt, k = 2
    - student prints an invalid permutation:
      2 A D
    - failed on trial 1 of 1000

==> FAILED

Total: 1/9 tests passed!


================================================================
********************************************************************************
*  TIMING (substituting reference RandomizedQueue and Deque)
********************************************************************************

Timing Permutation
*-----------------------------------------------------------
Running 23 total tests.

Test 1: count calls to methods in StdIn
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 2: count calls to methods in Deque and RandomizedQueue
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 3: count calls to methods in StdRandom
  * java Permutation 5 < distinct.txt
  * java Permutation 10 < permutation10.txt
  * java Permutation 1 < mediumTale.txt
  * java Permutation 20 < tale.txt
  * java Permutation 100 < tale.txt
  * java Permutation 16412 < tale.txt
==> passed

Test 4: Time main() with k = 5, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.01
=> passed        8000     0.01
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.03
=> passed      128000     0.05
=> passed      256000     0.27
=> passed      512000     0.25
==> 10/10 tests passed


Test 5: Time main() with k = 1000, for inputs containing n random strings

                    n  seconds
------------------------------
=> passed        1000     0.00
=> passed        2000     0.00
=> passed        4000     0.00
=> passed        8000     0.00
=> passed       16000     0.01
=> passed       32000     0.01
=> passed       64000     0.02
=> passed      128000     0.05
=> passed      256000     0.09
=> passed      512000     0.18
==> 10/10 tests passed


Total: 23/23 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Permutation
*-----------------------------------------------------------
Running 2 total tests.

Test 1: check that only one Deque or RandomizedQueue object is created
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 50
==> passed

Test 2: check that the maximum size of any Deque or RandomizedQueue object
        created is between k and n
  * filename = distinct.txt, n = 9, k = 1
  * filename = distinct.txt, n = 9, k = 2
  * filename = distinct.txt, n = 9, k = 4
  * filename = tinyTale.txt, n = 12, k = 10
  * filename = tale.txt, n = 138653, k = 5
  * filename = tale.txt, n = 138653, k = 50
  * filename = tale.txt, n = 138653, k = 500
  * filename = tale.txt, n = 138653, k = 5000
  * filename = tale.txt, n = 138653, k = 50000
==> passed

Test 3 (bonus): check that maximum size of any or Deque or RandomizedQueue object
                created is equal to k
  * filename = tale.txt, n = 138653, k = 5
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 500
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 5000
    - max size of RandomizedQueue object = 138653

  * filename = tale.txt, n = 138653, k = 50000
    - max size of RandomizedQueue object = 138653

==> FAILED

Total: 2/2 tests passed!

================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Deque
*-----------------------------------------------------------
For tests 1-4, the maximum amount of memory allowed for a Deque
containing n items is 48n + 192.

Running 28 total tests.

Test 1a-1e: Total memory usage after inserting n items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          424         
=> passed       64         3112         
=> passed      256        12328         
=> passed     1024        49192         
=> passed     4096       196648         
==> 5/5 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting n+1 items,
            where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

Memory after adding n = 2^i + 1 items: 48.00 n + 40.00   (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2n+1 items
            and deleting n items, where n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed        8          472         
=> passed       64         3160         
=> passed      256        12376         
=> passed     1024        49240         
=> passed     4096       196696         
==> 5/5 tests passed

Memory: 48.00 n + 40.00   (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting n items and then
            deleting all but one item, where n is a power of 2.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           88         
=> passed       64           88         
=> passed      256           88         
=> passed     1024           88         
=> passed     4096           88         
==> 5/5 tests passed

Memory after adding n = 2^i items: 88.00   (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting n items.
            (should not grow with n or be too large of a constant)

                 n        bytes
----------------------------------------------------------
=> passed        8           32         
=> passed       64           32         
=> passed      256           32         
=> passed     1024           32         
=> passed     4096           32         
==> 5/5 tests passed

Memory of iterator after adding n = 2^i items: 32.00   (R^2 = 1.000)



Test 6a: Insert n strings; delete them one at a time, checking for
         loitering after each deletion. The probabilities of addFirst()
         and addLast() are (p1, p2), respectively. The probabilities of
         removeFirst() and removeLast() are (q1, q2), respectively
  * 100 random insertions (1.0, 0.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (1.0, 0.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.0, 1.0) and 100 random deletions (1.0, 0.0)
  * 100 random insertions (0.0, 1.0) and 100 random deletions (0.0, 1.0)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 1
  * 100 random insertions (0.5, 0.5) and 100 random deletions (0.5, 0.5)
    - loitering observed during 99 of 100 deletions
    - maximum number of loitered objects at one time = 1
==> FAILED

Test 6b: Perform random operations, checking for loitering after
         each operation. The probabilities of addFirst(), addLast(),
         removeFirst(), and removeLast() are (p1, p2, p3, p4),
         respectively.
  * 100 random operations (0.8, 0.0, 0.2, 0.0)
  * 100 random operations (0.8, 0.0, 0.0, 0.2)
    - loitering detected after operation 7 of 100
    - sequence of operations was:
         deque.addFirst("BRPKCYTIOJ")
         deque.addFirst("BQSEGAQJEL")
         deque.addFirst("IJYGUWRMTG")
         deque.addFirst("DMGPRGRHCR")
         deque.addFirst("RALRVKPVYD")
         deque.addFirst("JJVRBKIGJO")
         deque.removeLast()      ==> BRPKCYTIOJ
    - loitered object(s):
      BRPKCYTIOJ

  * 100 random operations (0.0, 0.8, 0.2, 0.0)
  * 100 random operations (0.0, 0.8, 0.0, 0.2)
    - loitering detected after operation 11 of 100
    - sequence of operations was:
         deque.addLast("LLICVRJSRK")
         deque.addLast("DOYFCEIRGL")
         deque.addLast("PXFHGHDBXV")
         deque.addLast("XJZMXBLKOU")
         deque.addLast("VSCLMRWVXJ")
         deque.addLast("MWPEYAHQOQ")
         deque.addLast("EYPMXCZFBA")
         deque.addLast("UCPKFSSIGA")
         deque.addLast("OVODWGZOUN")
         deque.addLast("GDPNBKBXWM")
         deque.removeLast()      ==> GDPNBKBXWM
    - loitered object(s):
      GDPNBKBXWM

  * 100 random operations (0.4, 0.4, 0.1, 0.1)
    - loitering detected after operation 26 of 100
  * 100 random operations (0.2, 0.2, 0.3, 0.3)
    - loitering detected after operation 7 of 100
    - sequence of operations was:
         deque.addFirst("IEKMJHUCKV")
         deque.removeLast()      ==> IEKMJHUCKV
         deque.addFirst("NPVOOEVRTA")
         deque.addFirst("QGDYMGZBTD")
         deque.addLast("BXFQYKIQVZ")
         deque.addFirst("PJOHGIOZFX")
         deque.removeLast()      ==> BXFQYKIQVZ
    - loitered object(s):
      BXFQYKIQVZ

==> FAILED

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  * 128 random operations
  * 256 random operations
  * 512 random operations
==> passed

Total: 26/28 tests passed!

================================================================



Analyzing memory of RandomizedQueue
*-----------------------------------------------------------
For tests 1-5, the maximum amount of memory allowed for
a RandomizedQueue containing n items is 48n + 192.

Test 1a-1i: Total memory usage after inserting n items
            when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
=> passed      256         2104         
=> passed      512         4152         
=> passed     1024         8248         
=> passed     2048        16440         
=> passed     4096        32824         
=> passed     8192        65592         
==> 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 2a-2i: Total memory usage after inserting n items,
            when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33          568         
=> passed       65         1080         
=> passed      129         2104         
=> passed      257         4152         
=> passed      513         8248         
=> passed     1025        16440         
=> passed     2049        32824         
=> passed     4097        65592         
=> passed     8193       131128         
==> 9/9 tests passed

Memory: 16.00 n + 40.00   (R^2 = 1.000)


Test 3a-3i: Total memory usage after inserting 2n-1 items, and then
            deleting n-1 items, when n is one more than a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       33         1080         
=> passed       65         2104         
=> passed      129         4152         
=> passed      257         8248         
=> passed      513        16440         
=> passed     1025        32824         
=> passed     2049        65592         
=> passed     4097       131128         
=> passed     8193       262200         
==> 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Test 4a-4i: Total memory usage after inserting n items, deleting n items,
            then inserting n times, when n is a power of 2.

                 n        bytes
----------------------------------------------------------
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
=> passed      256         2104         
=> passed      512         4152         
=> passed     1024         8248         
=> passed     2048        16440         
=> passed     4096        32824         
=> passed     8192        65592         
==> 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 5a-5i: Total memory usage after inserting n items,
            and then deleting all but one item.

                 n        bytes
----------------------------------------------------------
=> passed       32          120         
=> passed       64          120         
=> passed      128          120         
=> passed      256          120         
=> passed      512          120         
=> passed     1024          120         
=> passed     2048          120         
=> passed     4096          120         
=> passed     8192          120         
==> 9/9 tests passed

Memory: 120.00   (R^2 = 1.000)


Test 6a-6d: Total memory usage of iterator after inserting n items.

                 n        bytes
----------------------------------------------------------
=> passed       32           32         
=> passed       64           32         
=> passed      128           32         
=> passed      256           32         
=> passed      512           32         
=> passed     1024           32         
=> passed     2048           32         
=> passed     4096           32         
=> passed     8192           32         
==> 9/9 tests passed

Memory: 32.00   (R^2 = 1.000)


Test 7a: Insert 100 strings; delete them one at a time, checking
         for loitering after each deletion.
==> passed

Test 7b: Perform random operations, checking for loitering after
         each operation. The probabilities of enqueue(), dequeue(),
         and sample() are (p1, p2, p3), respectively.
  * 200 random operations (0.8, 0.2, 0.0)
  * 200 random operations (0.2, 0.8, 0.0)
  * 200 random operations (0.6, 0.2, 0.2)
  * 200 random operations (0.2, 0.4, 0.4)
==> passed

Test 8: Insert T items into queue; then iterate over queue and check
        that worst-case constant memory is allocated or deallocated
        per iterator operation.
  * T = 64
  * T = 128
  * T = 256
==> passed

Test 9: Total memory usage after inserting n items, seeking to identify
        values of n where memory usage is minimized as a function of n.

                 n        bytes
----------------------------------------------------------
=> passed        8          120         
=> passed       16          184         
=> passed       32          312         
=> passed       64          568         
=> passed      128         1080         
=> passed      256         2104         
=> passed      512         4152         
=> passed     1024         8248         
=> passed     2048        16440         
==> 9/9 tests passed

Memory: 8.00 n + 56.00   (R^2 = 1.000)


Test 10: Total memory usage after inserting 4096 items, then successively
         deleting items, seeking values of n where memory usage is maximized
         as a function of n

                 n        bytes
----------------------------------------------------------
=> passed     2049        65592         
=> passed     1025        32824         
=> passed      513        16440         
=> passed      257         8248         
=> passed      129         4152         
=> passed       65         2104         
=> passed       33         1080         
=> passed       17          568         
=> passed        9          312         
==> 9/9 tests passed

Memory: 32.00 n + 24.00   (R^2 = 1.000)


Min observed memory for RandomizedQueue: 8.00 n + 56.00   (R^2 = 1.000)
Max observed memory for RandomizedQueue: 32.00 n + 24.00   (R^2 = 1.000)

Running 75 total tests.

Total: 75/75 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 103 total tests.

Test 1a-1k: make n calls to addFirst() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.04
=> passed     1024000     0.08
==> 11/11 tests passed


Test 2a-2k: make n calls to addLast() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.01
=> passed     1024000     0.01
==> 11/11 tests passed


Test 3a-3k: make n calls to addFirst() followed by n calls to removeLast()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.01
==> 11/11 tests passed


Test 4a-4k: make n calls to addLast() followed by n calls to removeFirst()
                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.09
==> 11/11 tests passed


Test 5a-5g: make n random calls to addFirst(), removeFirst(), isEmpty(), and size()
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.04
=> passed     1024000     0.09
=> passed     2048000     0.07
==> 12/12 tests passed


Test 6a-6g: make n random calls to addLast(), removeLast(), isEmpty(), and size(),
            with probabilities (0.7, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.04
=> passed     2048000     0.07
==> 12/12 tests passed


Test 7a-7g: make n random calls to addFirst(), addLast(), removeFirst(), removeLast(),
            isEmpty(), and size() with probabilities (0.3, 0.3, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.01
=> passed      512000     0.02
=> passed     1024000     0.04
=> passed     2048000     0.08
==> 12/12 tests passed


Test 8a-8g: make n calls to addFirst(); iterate over the n items by calling
            next() and hasNext()

                    n  seconds
------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.00
=> passed      256000     0.00
=> passed      512000     0.01
=> passed     1024000     0.01
=> passed     2048000     0.06
==> 12/12 tests passed


Test 9a-9k: make n calls to addFirst()/addLast(); interleave n calls each to
            removeFirst(), removeLast(), addFirst(), and addLast()

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed        8193     0.00
=> passed       16385     0.00
=> passed       32769     0.00
=> passed       65537     0.01
=> passed      128001     0.01
=> passed      256001     0.01
=> passed      512001     0.03
=> passed     1024001     0.06
==> 11/11 tests passed

Total: 103/103 tests passed!


================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 67 total tests.

Test 1: make n calls to enqueue() followed by n calls to dequeue();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 2: make n calls to enqueue() follwed by n calls to sample();
        count calls to StdRandom
  * n = 10
  * n = 100
  * n = 1000
==> passed

Test 3: make n calls to enqueue() and iterate over the n items;
        count calls to StdRandom
  * n = 10
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TimeRandomizedQueue.countCallsToStdRandomIterator(TimeRandomizedQueue.java:119)
    TimeRandomizedQueue.test3(TimeRandomizedQueue.java:352)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:525)


  * n = 100
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TimeRandomizedQueue.countCallsToStdRandomIterator(TimeRandomizedQueue.java:119)
    TimeRandomizedQueue.test3(TimeRandomizedQueue.java:353)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:525)


  * n = 1000
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TimeRandomizedQueue.countCallsToStdRandomIterator(TimeRandomizedQueue.java:119)
    TimeRandomizedQueue.test3(TimeRandomizedQueue.java:354)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:525)


==> FAILED

Test 4a-k: make n calls to enqueue() followed by n calls to dequeue()

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.04
=> passed     1024000     0.08
==> 11/11 tests passed


Test 5a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.2, 0.2, 0.2, 0.2, 0.2)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.03
=> passed      512000     0.06
=> passed     1024000     0.13
==> 11/11 tests passed


Test 6a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.6, 0.1, 0.1, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.01
=> passed      128000     0.01
=> passed      256000     0.01
=> passed      512000     0.03
=> passed     1024000     0.07
==> 11/11 tests passed


Test 7a-k: make n calls to enqueue() followed by n random calls to
           enqueue(), sample(), dequeue(), isEmpty(), and size()
           with probabilities (0.1, 0.1, 0.6, 0.1, 0.1)

                    n  seconds
----------------------------------
=> passed        1024     0.00
=> passed        2048     0.00
=> passed        4096     0.00
=> passed        8192     0.00
=> passed       16384     0.00
=> passed       32768     0.00
=> passed       65536     0.00
=> passed      128000     0.01
=> passed      256000     0.02
=> passed      512000     0.04
=> passed     1024000     0.12
==> 11/11 tests passed


Test 8a-k: make n calls to enqueue() followed by n calls each to
           next() and hasNext().

                    n  seconds
----------------------------------
    java.lang.ArrayIndexOutOfBoundsException: -1

    RandomizedQueue$MyIterator.next(RandomizedQueue.java:17)
    SafeIterable$SafeIterator.next(SafeIterable.java:61)
    TimeRandomizedQueue.timeIterator(TimeRandomizedQueue.java:233)
    TimeRandomizedQueue.test8(TimeRandomizedQueue.java:446)
    TimeRandomizedQueue.main(TimeRandomizedQueue.java:540)

=> FAILED        1024   [ Test did not complete due to an exception ].

==> 0/11 tests passed


Test 9a-i: make n calls to enqueue(); then call dequeue() twice,
           followed by enqueue() twice and repeat n times.

                    n  seconds
----------------------------------
=> passed        1025     0.00
=> passed        2049     0.00
=> passed        4097     0.00
=> passed        8193     0.00
=> passed       16385     0.00
=> passed       32769     0.01
=> passed       65537     0.02
=> passed      128001     0.02
=> passed      256001     0.05
==> 9/9 tests passed


Total: 55/67 tests passed!
