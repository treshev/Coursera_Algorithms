See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation  PASSED
API          PASSED

Spotbugs     PASSED
PMD          PASSED
Checkstyle   FAILED (0 errors, 3 warnings)

Correctness  2136 tests passed
Memory       816 tests passed
Timing       2842 tests passed

Aggregate score 63.33%
[Compilation 5%, API 5%, Spotbugs 0%, PMD 0%, Checkstyle 0%, Correctness 60%, Memory 10%, Timing 20%]

ASSESSMENT DETAILS

The following files were submitted
----------------------------------
8.5K Sep  6 2147 KdTree.java
2.6K Sep  6 2147 PointSET.java



  COMPILING                                                                    



% javac PointSET.java
-----------------------------------------------------------

% javac KdTree.java
-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
-----------------------------------------------------------
PointSET

KdTree

================================================================



  CHECKING STYLE AND COMMON BUG PATTERNS                                       



% spotbugs .class
-----------------------------------------------------------


================================================================


% pmd .
-----------------------------------------------------------


================================================================


% checkstyle .java
-----------------------------------------------------------

% custom checkstyle checks for PointSET.java
-----------------------------------------------------------
[WARN] PointSET.java6634 The numeric literal '10' appears to be unnecessary. [NumericLiteral]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for KdTree.java
-----------------------------------------------------------
[WARN] KdTree.java1639 You should not need to use the 'SET' data type in this program. [IllegalType]
[WARN] KdTree.java16942 You should not need to use the 'SET' data type in this program. [IllegalType]
Checkstyle ends with 0 errors and 2 warnings.


================================================================



  TESTING CORRECTNESS


Testing correctness of PointSET
-----------------------------------------------------------
Running 8 total tests.

A point in an m-by-m grid means that it is of the form (im, jm),
where i and j are integers between 0 and m

Test 1 inserting n random points and check size() after each insertion
        (size may be less than n because of duplicates)
   100000 random points in a 65536-by-65536 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkSize(TestPointSET.java52)
    TestPointSET.test1(TestPointSET.java366)
    TestPointSET.main(TestPointSET.java532)

   100000 random points in a 8192-by-8192 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkSize(TestPointSET.java52)
    TestPointSET.test1(TestPointSET.java367)
    TestPointSET.main(TestPointSET.java532)

   100000 random points in a 1024-by-1024 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkSize(TestPointSET.java52)
    TestPointSET.test1(TestPointSET.java368)
    TestPointSET.main(TestPointSET.java532)

   100000 random points in a 128-by-128 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkSize(TestPointSET.java52)
    TestPointSET.test1(TestPointSET.java369)
    TestPointSET.main(TestPointSET.java532)

   100000 random points in a 16-by-16 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkSize(TestPointSET.java52)
    TestPointSET.test1(TestPointSET.java370)
    TestPointSET.main(TestPointSET.java532)

== FAILED

Test 2 check isEmpty() for n = 0, 1, and 2 points
   0 points
   1 point
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.test2(TestPointSET.java396)
    TestPointSET.main(TestPointSET.java535)

== FAILED

Test 3 insert n random points and check contains() for n random query points
   100000 random points in a 65536-by-65536 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkContains(TestPointSET.java79)
    TestPointSET.test3(TestPointSET.java429)
    TestPointSET.main(TestPointSET.java538)

   100000 random points in a 8192-by-8192 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkContains(TestPointSET.java79)
    TestPointSET.test3(TestPointSET.java430)
    TestPointSET.main(TestPointSET.java538)

   100000 random points in a 1024-by-1024 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkContains(TestPointSET.java79)
    TestPointSET.test3(TestPointSET.java431)
    TestPointSET.main(TestPointSET.java538)

   100000 random points in a 128-by-128 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkContains(TestPointSET.java79)
    TestPointSET.test3(TestPointSET.java432)
    TestPointSET.main(TestPointSET.java538)

   100000 random points in a 16-by-16 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkContains(TestPointSET.java79)
    TestPointSET.test3(TestPointSET.java433)
    TestPointSET.main(TestPointSET.java538)

== FAILED

Test 4 insert n random points and check nearest() for n random query points
   1000 random points in a 65536-by-65536 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkNearest(TestPointSET.java111)
    TestPointSET.test4(TestPointSET.java440)
    TestPointSET.main(TestPointSET.java541)

   1000 random points in a 8192-by-8192 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkNearest(TestPointSET.java111)
    TestPointSET.test4(TestPointSET.java441)
    TestPointSET.main(TestPointSET.java541)

   1000 random points in a 1024-by-1024 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkNearest(TestPointSET.java111)
    TestPointSET.test4(TestPointSET.java442)
    TestPointSET.main(TestPointSET.java541)

   1000 random points in a 128-by-128 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkNearest(TestPointSET.java111)
    TestPointSET.test4(TestPointSET.java443)
    TestPointSET.main(TestPointSET.java541)

   1000 random points in a 16-by-16 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkNearest(TestPointSET.java111)
    TestPointSET.test4(TestPointSET.java444)
    TestPointSET.main(TestPointSET.java541)

== FAILED

Test 5 insert n random points and check range() for n random query rectangles
   1000 random rectangles and points in a 65536-by-65536 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkRange(TestPointSET.java162)
    TestPointSET.test5(TestPointSET.java451)
    TestPointSET.main(TestPointSET.java544)

   1000 random rectangles and points in a 8192-by-8192 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkRange(TestPointSET.java162)
    TestPointSET.test5(TestPointSET.java452)
    TestPointSET.main(TestPointSET.java544)

   1000 random rectangles and points in a 1024-by-1024 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkRange(TestPointSET.java162)
    TestPointSET.test5(TestPointSET.java453)
    TestPointSET.main(TestPointSET.java544)

   1000 random rectangles and points in a 128-by-128 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkRange(TestPointSET.java162)
    TestPointSET.test5(TestPointSET.java454)
    TestPointSET.main(TestPointSET.java544)

   1000 random rectangles and points in a 16-by-16 grid
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkRange(TestPointSET.java162)
    TestPointSET.test5(TestPointSET.java455)
    TestPointSET.main(TestPointSET.java544)

== FAILED

Test 6 check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3, p4, p5, and p6, respectively
   10000 calls with random points in a 8192-by-8192 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkAll(TestPointSET.java280)
    TestPointSET.test6(TestPointSET.java463)
    TestPointSET.main(TestPointSET.java547)

   10000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkAll(TestPointSET.java280)
    TestPointSET.test6(TestPointSET.java464)
    TestPointSET.main(TestPointSET.java547)

   10000 calls with random points in a 128-by-128 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkAll(TestPointSET.java280)
    TestPointSET.test6(TestPointSET.java465)
    TestPointSET.main(TestPointSET.java547)

   10000 calls with random points in a 16-by-16 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkAll(TestPointSET.java280)
    TestPointSET.test6(TestPointSET.java466)
    TestPointSET.main(TestPointSET.java547)

   10000 calls with random points in a 1-by-1 grid
    and probabilities 0.05, 0.05, 0.3, 0.2, 0.2, 0.2
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.checkAll(TestPointSET.java280)
    TestPointSET.test6(TestPointSET.java467)
    TestPointSET.main(TestPointSET.java547)

== FAILED

Test 7 check intermixed sequence of calls to isEmpty(), size(),
        insert(), contains(), range(), and nearest() with probabilities
        p1, p2, p3=0, p4, p5, and p6, respectively
        (data structure with 0 points)
   1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.5, 0.5, 0.0, 0.0, 0.0, 0.0
   1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.6, 0.0, 0.0
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.contains(PointSET.java34)
    TestPointSET.checkAll(TestPointSET.java288)
    TestPointSET.test7(TestPointSET.java479)
    TestPointSET.main(TestPointSET.java550)

   1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.6, 0.0
   1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.0, 0.0, 0.6
    - failed on trial 1 of 1000
    - student   nearest()    = (0.9482421875, 0.6142578125)
    - reference nearest()    = null
    - (0.9482421875, 0.6142578125) was not inserted into data structure
    - student   distanceSquaredTo() = 0

   1000 calls with random points in a 1024-by-1024 grid
    and probabilities 0.2, 0.2, 0.0, 0.2, 0.2, 0.2
    - failed on trial 4 of 1000
    - student   nearest()    = (0.6259765625, 0.55859375)
    - reference nearest()    = null
    - (0.6259765625, 0.55859375) was not inserted into data structure
    - student   distanceSquaredTo() = 0

== FAILED

Test 8 check whether two PointSET objects can be created at the same time
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TestPointSET.test8(TestPointSET.java500)
    TestPointSET.main(TestPointSET.java553)

== FAILED


Total 08 tests passed!


================================================================
Testing correctness of KdTree
-----------------------------------------------------------
Running 28 total tests.

In the tests below, we consider three classes of points and rectangles.

   Non-degenerate points no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

   Distinct points       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

   General points        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (im, jm),
where i and j are integers between 0 and m (inclusive).

Test 1a insert points from file; check size() and isEmpty() after each insertion
   input0.txt
   input1.txt
   input5.txt
   input10.txt
== passed

Test 1b insert non-degenerate points; check size() and isEmpty() after each insertion
   1 random non-degenerate points in a 1-by-1 grid
   5 random non-degenerate points in a 8-by-8 grid
   10 random non-degenerate points in a 16-by-16 grid
   50 random non-degenerate points in a 128-by-128 grid
   500 random non-degenerate points in a 1024-by-1024 grid
   50000 random non-degenerate points in a 65536-by-65536 grid
== passed

Test 1c insert distinct points; check size() and isEmpty() after each insertion
   1 random distinct points in a 1-by-1 grid
   10 random distinct points in a 8-by-8 grid
   20 random distinct points in a 16-by-16 grid
   10000 random distinct points in a 128-by-128 grid
   100000 random distinct points in a 1024-by-1024 grid
   100000 random distinct points in a 65536-by-65536 grid
== passed

Test 1d insert general points; check size() and isEmpty() after each insertion
   5 random general points in a 1-by-1 grid
   10 random general points in a 4-by-4 grid
   50 random general points in a 8-by-8 grid
   100000 random general points in a 16-by-16 grid
   100000 random general points in a 128-by-128 grid
   100000 random general points in a 1024-by-1024 grid
== passed

Test 2a insert points from file; check contains() with random query points
   input0.txt
   input1.txt
   input5.txt
   input10.txt
== passed

Test 2b insert non-degenerate points; check contains() with random query points
   1 random non-degenerate points in a 1-by-1 grid
   5 random non-degenerate points in a 8-by-8 grid
   10 random non-degenerate points in a 16-by-16 grid
   20 random non-degenerate points in a 32-by-32 grid
   500 random non-degenerate points in a 1024-by-1024 grid
   10000 random non-degenerate points in a 65536-by-65536 grid
== passed

Test 2c insert distinct points; check contains() with random query points
   1 random distinct points in a 1-by-1 grid
   10 random distinct points in a 4-by-4 grid
   20 random distinct points in a 8-by-8 grid
   10000 random distinct points in a 128-by-128 grid
   100000 random distinct points in a 1024-by-1024 grid
   100000 random distinct points in a 65536-by-65536 grid
== passed

Test 2d insert general points; check contains() with random query points
   10000 random general points in a 1-by-1 grid
   10000 random general points in a 16-by-16 grid
   10000 random general points in a 128-by-128 grid
   10000 random general points in a 1024-by-1024 grid
== passed

Test 3a insert points from file; check range() with random query rectangles
   input0.txt
   input1.txt
   input5.txt
   input10.txt
== passed

Test 3b insert non-degenerate points; check range() with random query rectangles
   1 random non-degenerate points and random rectangles in a 2-by-2 grid
   5 random non-degenerate points and random rectangles in a 8-by-8 grid
   10 random non-degenerate points and random rectangles in a 16-by-16 grid
   20 random non-degenerate points and random rectangles in a 32-by-32 grid
   500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
   10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
== passed

Test 3c insert distinct points; check range() with random query rectangles
   2 random distinct points and random rectangles in a 2-by-2 grid
   10 random distinct points and random rectangles in a 4-by-4 grid
   20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.25, 0.625] x [0.0, 0.875]
    - sequence of points inserted 
      A  0.5 0.875
      B  0.375 0.375
      C  0.625 0.625
      D  0.375 0.625
      E  0.625 0.375
      F  0.375 0.75
      G  1.0 0.625
      H  0.5 0.0
      I  0.25 0.75
      J  0.875 0.5
      K  0.875 0.25
      L  0.75 0.625
      M  0.5 0.375
      N  0.625 0.125
      O  0.0 0.75
      P  0.125 0.875
      Q  0.0 0.375
      R  1.0 0.375
      S  0.875 0.875
      T  0.125 1.0
    - student   range()  H B M E D C I F A 
    - reference range()  A B D I F C E H M N 

   100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1875, 0.75] x [0.3125, 0.5625]
    - student   range()  E K S J O I L Y R H M G P X X Q B K 
    - reference range()  L H J K E G O Y S I R Q B P K X X M P 

   1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1875, 0.65625] x [0.59375, 0.609375]
    - student   range()  T L A M L I F N H P B W 
    - reference range()  N H P T B F L W M A L I T M N 

   10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5859375, 0.8515625] x [0.09375, 0.96875]
    - student   range()  F O L P R W N T I N Z F V Z K Z I D E M R D T F M D ...
    - reference range()  A J P L F R O P Z N N W I T K Z F V I Z D D R E M T ...

== FAILED

Test 3d insert general points; check range() with random query rectangles
   5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 0.5] x [0.0, 1.0]
    - student   range()  T P 
    - reference range()  P T D 

   5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.4375, 0.9375] x [0.125, 0.25]
    - student   range()  O P E Y W Q T K H L S D W Q T O J M O L D L T J 
    - reference range()  L O P M H Q Y S E O Q W T Q L D D W T L T J K N J O ...

   5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.109375, 0.65625] x [0.2265625, 0.6484375]
    - student   range()  Z Y O M E S D Q R S O I Z P A U V Y S X J K M G W S ...
    - reference range()  Z Y Y G P J N I R P Z B P I W Y Z Q K O Y P M S E P ...

   5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0654296875, 0.92578125] x [0.5712890625, 0.6025390625]
    - student   range()  U G P D Y S L K G T V K Z S V B R M R X Y D Q Y D C ...
    - reference range()  O M Z Y Q X A U A B A U F P C L Q R I Y G U R C K K ...

== FAILED

Test 3e insert random points; check range() with tiny rectangles
         enclosing each point
   5 tiny rectangles and 5 general points in a 2-by-2 grid
   10 tiny rectangles and 10 general points in a 4-by-4 grid
   20 tiny rectangles and 20 general points in a 8-by-8 grid
   5000 tiny rectangles and 5000 general points in a 128-by-128 grid
   5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
   5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
== passed

Test 4a insert points from file; check range() with random query rectangles
         and check traversal of kd-tree
   input5.txt
   input10.txt
== passed

Test 4b insert non-degenerate points; check range() with random query rectangles
         and check traversal of kd-tree
   3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
   6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
   10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
   20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
   30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
== passed

Test 5a insert points from file; check nearest() with random query points
   input0.txt
    java.lang.NullPointerException

    KdTree.nearest(KdTree.java212)
    TestKdTree.checkNearest(TestKdTree.java297)
    TestKdTree.checkNearest(TestKdTree.java263)
    TestKdTree.test5a(TestKdTree.java1436)
    TestKdTree.main(TestKdTree.java1683)

   input1.txt
   input5.txt
   input10.txt
== FAILED

Test 5b insert non-degenerate points; check nearest() with random query points
   5 random non-degenerate points in a 8-by-8 grid
   10 random non-degenerate points in a 16-by-16 grid
   20 random non-degenerate points in a 32-by-32 grid
   30 random non-degenerate points in a 64-by-64 grid
   10000 random non-degenerate points in a 65536-by-65536 grid
== passed

Test 5c insert distinct points; check nearest() with random query points
   10 random distinct points in a 4-by-4 grid
   15 random distinct points in a 8-by-8 grid
   20 random distinct points in a 16-by-16 grid
   100 random distinct points in a 32-by-32 grid
   10000 random distinct points in a 65536-by-65536 grid
== passed

Test 5d insert general points; check nearest() with random query points
   10000 random general points in a 16-by-16 grid
   10000 random general points in a 128-by-128 grid
   10000 random general points in a 1024-by-1024 grid
== passed

Test 6a insert points from file; check nearest() with random query points
         and check traversal of kd-tree
   input5.txt
   input10.txt
== passed

Test 6b insert non-degenerate points; check nearest() with random query points
         and check traversal of kd-tree
   5 random non-degenerate points in a 8-by-8 grid
   10 random non-degenerate points in a 16-by-16 grid
    - failed on trial 9 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - sequence of points inserted 
      A  0.8125 0.1875
      B  0.5 0.4375
      C  0.625 0.875
      D  1.0 0.6875
      E  0.1875 0.3125
      F  0.25 0.25
      G  0.3125 0.375
      H  0.375 1.0
      I  0.5625 0.9375
      J  0.0 0.5625
    - query point                   = (0.9375, 0.125)
    - student   nearest()           = (0.8125, 0.1875)
    - reference nearest()           = (0.8125, 0.1875)
    - student   distanceSquaredTo() = 0.01953125
    - reference distanceSquaredTo() = 0.01953125
    - student sequence of kd-tree nodes involved in calls to distanceSquaredTo()
      A D B E F G 
    - reference sequence of kd-tree nodes involved in calls to distanceSquaredTo()
      A D B E F 

   20 random non-degenerate points in a 32-by-32 grid
   30 random non-degenerate points in a 64-by-64 grid
    - failed on trial 31 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 14
    - number of reference entries = 13

   50 random non-degenerate points in a 128-by-128 grid
    - failed on trial 10 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 15
    - number of reference entries = 14

   1000 random non-degenerate points in a 2048-by-2048 grid
    - failed on trial 9 of 1000
    - performs incorrect traversal of kd-tree during call to nearest()
    - number of student   entries = 50
    - number of reference entries = 48
    - entry 15 of the two sequences are not equal
    - student   entry 15 = (0.1875, 0.54931640625)
    - reference entry 15 = (0.17138671875, 0.884765625)

== FAILED

Test 7 insert n random points; check that repeated calls to get(),
         range(), and nearest() with the same argument yield same results
   10 random general points in a 4-by-4 grid
   20 random general points in a 8-by-8 grid
   100 random general points in a 128-by-128 grid
   1000 random general points in a 65536-by-65536 grid
== passed

Test 8a check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
   20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
   20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
   20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
   20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
   20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
   20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
== passed

Test 8b check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
   20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
   20000 calls with distinct points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 48 of 20000
    - rectangle = [0.0, 0.4] x [0.2, 0.7]
    - student   range()  P L B 
    - reference range()  L B P D 

   20000 calls with distinct points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 212 of 20000
    - rectangle = [0.11, 0.97] x [0.44, 0.61]
    - student   range()  P C G R V Q F S 
    - reference range()  R C G P Q S L F V 

   20000 calls with distinct points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2441 of 20000
    - rectangle = [0.079, 0.494] x [0.255, 0.913]
    - student   range()  M O B L C U Q J J G J E B C Q E Z Q K H J Q T G Y Q ...
    - reference range()  J T M A H Z G K F C H R Y H U E U Q G V G Y G L P X ...

   20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 6891 of 20000
    - rectangle = [0.3746337890625, 0.4512939453125] x [0.03173828125, 0.9949951171875]
    - student   range()  V W L C I F B F H J T J A B T C G W V E A E K P L Y ...
    - reference range()  Z E F I V C L W J C B B A E G W L D F M T Y H A O V ...

   20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 9388 of 20000
    - rectangle = [0.1876373291015625, 0.964202880859375] x [0.71868896484375, 0.8766326904296875]
    - student   range()  E Y P P C Q F C A C C Q H G T P O L U N H V X Q Z U ...
    - reference range()  T C Q Y H Q Z F Q P X E O Z B F J W Y V X D B L G X ...

== FAILED

Test 8c check intermixed sequence of calls to insert(), isEmpty(),
         size(), contains(), range(), and nearest() with probabilities
         (p1, p2, p3, p4, p5, p6), respectively
   20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 18 of 20000
    - rectangle = [0.0, 1.0] x [0.0, 1.0]
    - student   range()  V O Z 
    - reference range()  Z O V T 
    - sequence of operations was
           st.insert(1.0, 1.0)
           st.nearest((1.0, 1.0))   ==  (1.0, 1.0)
           st.contains((1.0, 1.0))  ==  true
           st.range([0.0, 0.0] x [1.0, 1.0])  ==  empty
           st.nearest((0.0, 0.0))   ==  (1.0, 1.0)
           st.nearest((1.0, 0.0))   ==  (1.0, 1.0)
           st.nearest((0.0, 1.0))   ==  (1.0, 1.0)
           st.contains((0.0, 0.0))  ==  false
           st.insert(1.0, 1.0)
           st.contains((1.0, 0.0))  ==  false
           st.range([0.0, 1.0] x [0.0, 1.0])  ==  Z 
           st.size()  ==  1
           st.insert(1.0, 0.0)
           st.insert(0.0, 1.0)
           st.insert(0.0, 0.0)
           st.insert(0.0, 0.0)
           st.contains((0.0, 0.0))  ==  true
           st.range([0.0, 1.0] x [0.0, 1.0])  ==  V O Z 

   20000 calls with general points in a 10-by-10 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 98 of 20000
    - rectangle = [0.1, 0.8] x [0.2, 0.3]
    - student   range()  J W 
    - reference range()  J D W 

   20000 calls with general points in a 100-by-100 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 278 of 20000
    - rectangle = [0.17, 0.83] x [0.73, 0.96]
    - student   range()  C E Y V M W V E T K M D S 
    - reference range()  W V Y E C M S T V G E M K D 

   20000 calls with general points in a 1000-by-1000 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 1847 of 20000
    - rectangle = [0.086, 0.445] x [0.616, 0.86]
    - student   range()  N T D J N B R Y S K M L X U P Z U Z O Z D B P K V I ...
    - reference range()  V X N T M B Y R R Z H P W W A S U X I X N J U L D E ...

   20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
    - failed on trial 2429 of 20000
    - rectangle = [0.4095458984375, 0.440185546875] x [0.36572265625, 0.9813232421875]
    - student   range()  J F P J F N N E U M T Z 
    - reference range()  F J J P N F E U N S T M Z 

   20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.2, 0.2, 0.2)
== FAILED

Test 9 check intermixed sequence of calls to insert(), isEmpty(),
        size(), contains(), range(), and nearest() with probabilities
        (p1=0, p2, p3, p4, p5, p6), respectively
        (data structure with 0 points)
   1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.5, 0.5, 0.0, 0.0, 0.0)
   1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.6, 0.0, 0.0)
   1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.6, 0.0)
   1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.0, 0.0, 0.6)
    java.lang.NullPointerException

    KdTree.nearest(KdTree.java212)
    TestKdTree.checkAll(TestKdTree.java923)
    TestKdTree.test9(TestKdTree.java1567)
    TestKdTree.main(TestKdTree.java1713)

    - sequence of operations was
           st.isEmpty()  ==  true
           st.size()  ==  0
           st.nearest((0.0478515625, 0.4189453125))

   1000 calls with no points in a 1024-by-1024 grid
    and probabilities (0.0, 0.2, 0.2, 0.2, 0.2, 0.2)
    java.lang.NullPointerException

    KdTree.nearest(KdTree.java212)
    TestKdTree.checkAll(TestKdTree.java923)
    TestKdTree.test9(TestKdTree.java1568)
    TestKdTree.main(TestKdTree.java1713)

    - sequence of operations was
           st.isEmpty()  ==  true
           st.nearest((0.1806640625, 0.2412109375))

== FAILED

Test 10 check that two KdTree objects can be created at the same time
== passed

Test 11 check that the specified exception is thrown with null arguments
   argument to insert() is null
   argument to contains() is null
   argument to range() is null
   argument to nearest() is null
== passed


Total 2128 tests passed!


================================================================

  MEMORY


Analyzing memory of Point2D
-----------------------------------------------------------
Memory of Point2D object = 32 bytes
================================================================



Analyzing memory of RectHV
-----------------------------------------------------------
Memory of RectHV object = 48 bytes
================================================================



Analyzing memory of PointSET
-----------------------------------------------------------
Running 8 total tests.

Memory usage of a PointSET with n points (including Point2D and RectHV objects).
Maximum allowed memory is 96n + 200 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    MemoryOfPointSET.main(MemoryOfPointSET.java84)

Total 08 tests passed!

================================================================



Analyzing memory of KdTree
-----------------------------------------------------------
Running 8 total tests.

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
= passed        1          176                160
= passed        2          312                288
= passed        5          720                672
= passed       10         1400               1312
= passed       25         3440               3232
= passed      100        13640              12832
= passed      400        54440              51232
= passed      800       108840             102432
== 88 tests passed

Total 88 tests passed!

Estimated student   memory (bytes) = 136.00 n + 40.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 128.00 n + 32.00  (R^2 = 1.000)
================================================================




  TIMING


Timing PointSET
-----------------------------------------------------------
Running 14 total tests.


Inserting n points into a PointSET

               n      ops per second
----------------------------------------
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TimePointSET.insert(TimePointSET.java71)
    TimePointSET.insertTest(TimePointSET.java214)
    TimePointSET.main(TimePointSET.java358)

== 04 tests passed

Performing contains() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TimePointSET.contains(TimePointSET.java90)
    TimePointSET.containsTest(TimePointSET.java256)
    TimePointSET.main(TimePointSET.java359)

== 04 tests passed

Performing range() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TimePointSET.range(TimePointSET.java158)
    TimePointSET.rangeTest(TimePointSET.java298)
    TimePointSET.main(TimePointSET.java360)

== 03 tests passed

Performing nearest() queries after inserting n points into a PointSET

               n      ops per second
----------------------------------------
    java.lang.UnsupportedOperationException calling hashCode() is not permitted on this assignment

    edu.princeton.cs.algs4.Point2D.hashCode(Point2D.java272)
    PointSET.insert(PointSET.java28)
    TimePointSET.nearest(TimePointSET.java124)
    TimePointSET.nearestTest(TimePointSET.java339)
    TimePointSET.main(TimePointSET.java361)

== 03 tests passed

Total 014 tests passed!


================================================================



Timing KdTree
-----------------------------------------------------------
Running 28 total tests.


Test 1a-d Insert n points into a 2d tree. The table gives the average number of calls
           to methods in RectHV and Point per call to insert().

                                                                                                Point2D
               n      ops per second       RectHV()           x()               y()             equals()
----------------------------------------------------------------------------------------------------------------
= passed   160000     849854               1.0              45.8              43.8              21.6         
= passed   320000     757488               1.0              46.6              44.6              22.0         
= passed   640000     627095               1.0              49.6              47.6              23.5         
= passed  1280000     523810               1.0              53.8              51.8              25.6         
== 44 tests passed


Test 2a-h Perform contains() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to contains().

                                                                               Point2D
               n      ops per second       x()               y()               equals()
-----------------------------------------------------------------------------------------------
= passed    10000     403653              18.5              17.5              18.0         
= passed    20000     413859              19.7              18.7              19.2         
= passed    40000     394924              21.8              20.8              21.3         
= passed    80000     361338              22.0              21.0              21.5         
= passed   160000     341681              23.2              22.2              22.7         
= passed   320000     304034              25.0              24.0              24.5         
= passed   640000     310381              25.7              24.7              25.2         
= passed  1280000     248942              27.2              26.2              26.7         
== 88 tests passed


Test 3a-h Perform range() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to range().

               n      ops per second       intersects()      contains()        x()               y()
---------------------------------------------------------------------------------------------------------------
= passed    10000     238756               0.0              31.1              97.8              57.7         
= passed    20000     243417               0.0              32.6             102.1              65.1         
= passed    40000     202255               0.0              39.3             123.2              72.0         
= passed    80000     185064               0.0              40.7             127.2              75.0         
= passed   160000     165336               0.0              42.5             134.2              84.6         
= passed   320000     181877               0.0              40.2             126.0              75.6         
= passed   640000     123384               0.0              43.3             135.4              84.3         
= passed  1280000     106300               0.0              47.0             147.1              83.1         
== 88 tests passed


Test 4a-h Perform nearest() queries after inserting n points into a 2d tree. The table gives
           the average number of calls to methods in RectHV and Point per call to nearest().

                                         Point2D                 RectHV
               n      ops per second     distanceSquaredTo()     distanceSquaredTo()        x()               y()
------------------------------------------------------------------------------------------------------------------------
= passed    10000   273169                  74.7                   24.9                    81.9              81.3         
= passed    20000   275029                  81.9                   27.3                    89.6              89.2         
= passed    40000   253355                  96.1                   32.0                   106.1             104.5         
= passed    80000   240480                  98.0                   32.7                   106.9             106.9         
= passed   160000   218929                 106.2                   35.4                   116.5             116.3         
= passed   320000   173103                 110.4                   36.8                   121.4             119.9         
= passed   640000   145704                 114.7                   38.2                   125.5             124.8         
= passed  1280000   125217                 128.1                   42.7                   139.6             139.3         
== 88 tests passed



Total 2828 tests passed!


================================================================